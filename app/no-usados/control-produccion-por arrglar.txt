import Ionicons from '@expo/vector-icons/Ionicons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import DateTimePicker from '@react-native-community/datetimepicker';
import React, { useEffect, useState } from 'react';
import {
    ActivityIndicator,
    FlatList,
    Modal, Platform,
    StyleSheet,
    Text,
    TextInput,
    TouchableOpacity, useWindowDimensions, View
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

import { useRouter } from 'expo-router';
import AppHeader from '../../components/AppHeader';
import ModalHeader from '../../components/ModalHeader';
import { useAuth } from '../../hooks/useAuth';

import SQLModal from '../../components/SQLModal';
import { API_URL } from '../../config/constants';
import COLORS from '../../constants/Colors';
import { useOfflineMode } from '../../hooks/useOfflineMode';

// Define los campos que devuelve el backend

// Tipo para la consulta tiempo-real (ahora hist√≥rica por rango de fechas)
type TiempoRealRecord = {
  Serie?: string;
  Numero?: number;
  Fecha: string;
  CodigoOperario: string;
  OperarioNombre?: string | null;
  Tipo?: number;
  Gastos1?: number;
  Gastos2?: number;
  Kms1?: number;
  Kms2?: number;
  CodigoSerie?: string;
  CodigoNumero?: number;
  Linea?: number;
  FechaInicio?: string | null;
  HoraInicio?: string | null;
  FechaFin?: string | null;
  HoraFin?: string | null;
  CodigoPuesto?: string | null;
  CodigoTarea?: string | null;
  ObraSerie?: string | null;
  ObraNumero?: number | null;
  FabricacionSerie?: string | null;
  FabricacionNumero?: number | null;
  FabricacionLinea?: number | null;
  NumeroManual?: string | null;
  CodigoLote?: string | null;
  LoteLinea?: number | null;
  Modulo?: string | null;
  TiempoDedicado?: number | null;
  Abierta?: number | null;
  TipoTarea?: number | null;
};

interface UserData {
  id: number;
  nombre?: string;
  rol?: string;
  name?: string;
  role?: string;
}

// Interfaces para la estructura jer√°rquica
interface HierarchicalRecord {
  pedido: string;
  modulo: string;
  tarea: string;
  operario: string;
  records: TiempoRealRecord[];
  totalTime: number;
  fechas: string[];
}

interface ModuloGroup {
  modulo: string;
  tareas: Map<string, HierarchicalRecord[]>;
  totalTime: number;
  operarios: Set<string>;
  fechas: Set<string>;
}

interface PedidoGroup {
  pedido: string;
  modulos: Map<string, ModuloGroup>;
  totalTime: number;
  operarios: Set<string>;
  fechas: Set<string>;
}

function getLastMonday(date = new Date()) {
  const d = new Date(date);
  const day = d.getDay();
  const diff = day === 0 ? 6 : day - 1; // Si es domingo, retrocede 6 d√≠as
  d.setDate(d.getDate() - diff);
  d.setHours(0,0,0,0);
  return d;
}

export default function ControlTerminalesScreen() {

  const { authenticated, loading: authLoading } = useAuth();

  const debugLogs = true;
  const log = (...args: any[]) => {
    if (debugLogs) {
      console.log('[ControlPedidos]', ...args);
    }
  };

  // Mapeo de tareas
  const tareaNombres = {
    1: 'CORTE',
    2: 'PRE-ARMADO',
    3: 'ARMADO',
    4: 'HERRAJE',
    6: 'MATRIMONIO',
    7: 'COMPACTO',
    9: 'ACRISTALADO',
    10: 'EMBALAJE',
    11: 'OPTIMIZACION',
    12: 'REBARBA'
  };

  // Formatear fecha a YYYY-MM-DD (extrae la parte date si viene en ISO)
  const formatDateOnly = (dateStr?: string | null) => {
    if (!dateStr) return '-';
    const s = String(dateStr).trim();
    if (!s) return '-';
    if (s.includes('T')) return s.split('T')[0];
    try {
      const d = new Date(s);
      if (!isNaN(d.getTime())) return d.toISOString().slice(0, 10);
    } catch (e) {
      // fallthrough
    }
    // Fallback: first 10 chars
    return s.slice(0, 10);
  };

  // Formatear duraci√≥n a una cadena legible.
  // Nota: el backend suele enviar el tiempo en segundos. Para compatibilidad,
  // asumimos que el n√∫mero recibido representa segundos. Si el valor es
  // extremadamente grande (heur√≠stica), lo tratamos como milisegundos.
  const formatDuration = (value?: number | null) => {
    if (value == null) return '-';
    const n = Number(value);
    if (isNaN(n)) return '-';

    // Heur√≠stica m√≠nima: si el n√∫mero es muy grande (p.ej. > 1e9), probablemente
    // venga en milisegundos -> convertir a segundos. Esto evita dividir por 1000
    // cuando el backend ya env√≠a segundos peque√±os (p.ej. 660 = 11 minutos).
    let totalSeconds = n;
    if (n > 1e9) {
      totalSeconds = Math.floor(n / 1000);
    }

    totalSeconds = Math.floor(totalSeconds);

    const days = Math.floor(totalSeconds / 86400);
    let rem = totalSeconds % 86400;
    const hours = Math.floor(rem / 3600);
    rem = rem % 3600;
    const minutes = Math.floor(rem / 60);
    const seconds = rem % 60;

    if (days > 0) {
      return `${days} dia${days > 1 ? 's' : ''} - ${hours} horas - ${minutes} minutos`;
    }
    if (hours > 0) {
      return `${hours} horas - ${minutes} minutos`;
    }
    return `${minutes} minutos - ${seconds} segundos`;
  };

  // tiempo real -> ahora hist√≥rico por rango
  const [tiempoRecords, setTiempoRecords] = useState<TiempoRealRecord[]>([]);
  const [loadingTiempo, setLoadingTiempo] = useState(false);
  const [filterMode, setFilterMode] = useState<'operador' | 'tarea' | 'pedido'>('operador');
  const [groupedList, setGroupedList] = useState<any[]>([]);
  const [counts, setCounts] = useState<{ operador: number; tarea: number; pedido: number }>({ operador: 0, tarea: 0, pedido: 0 });
  // Quitar cache y polling refs - no m√°s polling
  // highlight groups que cambiaban - no aplica sin polling
  const [highlightedGroups, setHighlightedGroups] = useState<Record<string, boolean>>({});
  const [detailModalVisible, setDetailModalVisible] = useState(false);
  const [detailList, setDetailList] = useState<TiempoRealRecord[]>([]);
  const [modalCounts, setModalCounts] = useState<{ operador: number; tarea: number; pedido: number }>({ operador: 0, tarea: 0, pedido: 0 });
  // compute modal counts whenever detailList changes
  useEffect(() => {
    const op = new Set<string>();
    const ta = new Set<string>();
    const pe = new Set<string>();
    for (const r of detailList) {
      op.add(operarioFirstNameKey(r.OperarioNombre || r.CodigoOperario));
      ta.add(String(r.CodigoTarea ?? 'SIN_TAREA'));
      pe.add(String(r.NumeroManual ?? 'SIN_PEDIDO'));
    }
    setModalCounts({ operador: op.size, tarea: ta.size, pedido: pe.size });
  }, [detailList]);
  const [selectedGroupKey, setSelectedGroupKey] = useState<string | null>(null);
  const [modalContext, setModalContext] = useState<'operador' | 'tarea' | 'pedido' | null>(null);
  const [modalGroupBy, setModalGroupBy] = useState<'none' | 'operador' | 'tarea' | 'pedido'>('none');
  const [searchQuery, setSearchQuery] = useState('');
  const [userData, setUserData] = useState<UserData | null>(null);

  const [userModalVisible, setUserModalVisible] = useState(false);     // ModalHeader (usuario/rol)

  const [sqlVisible, setSqlVisible] = useState(false);
  const [loading, setLoading] = useState(true);
  const [token, setToken] = useState<string | null>(null);
  const [modalUser, setModalUser] = React.useState({ userName: '', role: '' });
  const router = useRouter();

  // Quitar pollingEnabled - solo refresh manual

  // nowTick fuerza rerender en intervalos para actualizar estadisticas en tiempo real - quitar si no es necesario
  const [nowTick, setNowTick] = useState<number>(Date.now());
  useEffect(() => {
    const id = setInterval(() => setNowTick(Date.now()), 1000);
    return () => clearInterval(id);
  }, []);

  // Constante de jornada reutilizable
  const JORNADA_SECONDS = 7.5 * 3600; // 27000

  // Detectar plataforma web para layout espec√≠fico
  const isWeb = Platform.OS === 'web';
  const { width: windowWidth } = useWindowDimensions();
  const isMobile = !isWeb && windowWidth < 600;
  const cols = isWeb ? 4 : 3;
  const gap = 8;
  // Calcular ancho espec√≠fico para garantizar N columnas exactas
  const computedCardWidth = isWeb 
    ? Math.max(150, Math.floor((windowWidth - 40 - gap * (cols - 1)) / cols))
    : Math.floor((windowWidth - 32) / 3) - 4; // Para m√≥vil: ancho exacto para 3 columnas

  // justo despu√©s de userData / authenticated:
  const normalizedRole =
    ((userData?.rol ?? userData?.role) ?? '')
      .toString()
      .trim()
      .toLowerCase();

  const allowed = ['admin', 'developer', 'administrador'].includes(normalizedRole);

  const { serverReachable } = useOfflineMode();

  // Verificar autenticaci√≥n al cargar
  useEffect(() => {
    if (!authLoading && !authenticated) {
      console.log('üö´ Usuario no autenticado, redirigiendo a login...');
      router.replace('/login');
    }
  }, [authenticated, authLoading, router]);

  // Obtiene rol de usuario
  useEffect(() => {
    (async () => {
      try {
        // 1. Recuperar el token
        const storedToken = await AsyncStorage.getItem('token');
        // 2. Recuperar los datos de usuario (JSON)
        const rawUser = await AsyncStorage.getItem('userData');

        console.log('üü¢ AsyncStorage token:', storedToken);
        console.log('üü¢ AsyncStorage userData:', rawUser);

        if (storedToken) {
          setToken(storedToken);
        }
        if (rawUser) {
          let parsedUser = JSON.parse(rawUser);
          console.log('üü¢ parsedUser:', parsedUser);
          // Mapear si vienen como name/role
          if (parsedUser) {
            if (parsedUser.nombre && parsedUser.rol) {
              setUserData(parsedUser);
            } else if (parsedUser.name && parsedUser.role) {
              setUserData({
                id: parsedUser.id || 0,
                nombre: parsedUser.name,
                rol: parsedUser.role,
              });
            } else {
              setUserData(null);
            }
          } else {
            setUserData(null);
          }
        }
      } catch (error) {
        console.error('‚åê Error al leer AsyncStorage:', error);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  // Carga inicial: fechas desde √∫ltimo lunes hasta hoy
  const today = new Date();
  const lastMonday = getLastMonday(today);
  const [fromDate, setFromDate] = useState<Date>(lastMonday);
  const [toDate, setToDate] = useState<Date>(today);
  const [showFromPicker, setShowFromPicker] = useState(false);
  const [showToPicker, setShowToPicker] = useState(false);

  useEffect(() => {
    fetchTiempoReal(formatDateOnly(fromDate.toISOString()), formatDateOnly(toDate.toISOString()));
  }, [fromDate, toDate]);

  // Fetch de tiempo-real desde backend con rango de fechas
  async function fetchTiempoReal(from: string, to: string) {
    try {
      setLoadingTiempo(true);
      const res = await fetch(`${API_URL}/control-terminales/production-analytics?start=${from}&end=${to}`); // Asumir backend soporta params from/to
      if (!res.ok) {
        console.warn('[tiempo-real] respuesta no ok', res.status);
        setTiempoRecords([]);
        return;
      }
      const json = await res.json();
      if (!Array.isArray(json)) {
        setTiempoRecords([]);
        return;
      }
      setTiempoRecords(json as TiempoRealRecord[]);
    } catch (err) {
      console.error('[tiempo-real] error', err);
      setTiempoRecords([]);
    } finally {
      setLoadingTiempo(false);
    }
  }

  // Helper para obtener timestamp (Fecha + HoraInicio/HoraFin)
  const recordTimestamp = (r: TiempoRealRecord) => {
    try {
      // Preferir FechaInicio/HoraInicio cuando exista (m√°s precisa para inicio de tarea)
      const fecha = r.FechaInicio || r.Fecha || r.FechaFin;
      let hora = r.HoraInicio || r.HoraFin || '00:00:00';
      if (!fecha) return 0;
      const normalizeHora = (h?: string | null) => {
        if (!h) return '00:00:00';
        const s = String(h).trim();
        if (!s) return '00:00:00';
        // si viene 'HH:MM' a√±adir segundos
        if (/^\d{1,2}:\d{2}$/.test(s)) return `${s}:00`;
        // si ya tiene segundos, devolver
        if (/^\d{1,2}:\d{2}:\d{2}$/.test(s)) return s;
        return s;
      };
      hora = normalizeHora(hora);
      const s = `${fecha}T${hora}`;
      const t = new Date(s).getTime();
      return isNaN(t) ? 0 : t;
    } catch (e) {
      return 0;
    }
  };

  // Helper para normalizar y extraer primer nombre (key) de OperarioNombre o CodigoOperario
  const operarioFirstNameKey = (val?: string | null) => {
    if (!val) return 'SIN_OPERARIO';
    const s = String(val).trim();
    if (!s) return 'SIN_OPERARIO';
    // separar por espacios o barras y tomar la primera parte
    const first = s.split(/[\s\/]+/)[0];
    return first.toUpperCase();
  };

  // NUEVA FUNCI√ìN: Crear estructura jer√°rquica
  const createHierarchicalStructure = (records: TiempoRealRecord[]): Map<string, PedidoGroup> => {
    const pedidosMap = new Map<string, PedidoGroup>();
    
    for (const record of records) {
      const pedido = record.NumeroManual || 'SIN_PEDIDO';
      const modulo = record.Modulo || 'SIN_MODULO';
      const tarea = record.CodigoTarea || 'SIN_TAREA';
      const operario = operarioFirstNameKey(record.OperarioNombre || record.CodigoOperario);
      const tiempo = record.TiempoDedicado || 0;
      const fecha = formatDateOnly(record.FechaInicio || record.Fecha);

      // Obtener o crear pedido
      if (!pedidosMap.has(pedido)) {
        pedidosMap.set(pedido, {
          pedido,
          modulos: new Map<string, ModuloGroup>(),
          totalTime: 0,
          operarios: new Set<string>(),
          fechas: new Set<string>()
        });
      }
      const pedidoGroup = pedidosMap.get(pedido)!;
      
      // Obtener o crear m√≥dulo dentro del pedido
      if (!pedidoGroup.modulos.has(modulo)) {
        pedidoGroup.modulos.set(modulo, {
          modulo,
          tareas: new Map<string, HierarchicalRecord[]>(),
          totalTime: 0,
          operarios: new Set<string>(),
          fechas: new Set<string>()
        });
      }
      const moduloGroup = pedidoGroup.modulos.get(modulo)!;
      
      // Obtener o crear tarea dentro del m√≥dulo
      if (!moduloGroup.tareas.has(tarea)) {
        moduloGroup.tareas.set(tarea, []);
      }
      const tareaRecords = moduloGroup.tareas.get(tarea)!;
      
      // Buscar si ya existe un registro para este operario en esta tarea
      let hierarchicalRecord = tareaRecords.find(hr => hr.operario === operario);
      if (!hierarchicalRecord) {
        hierarchicalRecord = {
          pedido,
          modulo,
          tarea,
          operario,
          records: [],
          totalTime: 0,
          fechas: []
        };
        tareaRecords.push(hierarchicalRecord);
      }
      
      // Agregar el registro
      hierarchicalRecord.records.push(record);
      hierarchicalRecord.totalTime += tiempo;
      if (!hierarchicalRecord.fechas.includes(fecha)) {
        hierarchicalRecord.fechas.push(fecha);
      }
      
      // Actualizar totales
      moduloGroup.totalTime += tiempo;
      moduloGroup.operarios.add(operario);
      moduloGroup.fechas.add(fecha);
      
      pedidoGroup.totalTime += tiempo;
      pedidoGroup.operarios.add(operario);
      pedidoGroup.fechas.add(fecha);
    }
    
    return pedidosMap;
  };

  // NUEVA FUNCI√ìN: Renderizar vista jer√°rquica para operarios
  const renderOperarioHierarchy = (records: TiempoRealRecord[]) => {
    const hierarchyMap = createHierarchicalStructure(records);
    const pedidos = Array.from(hierarchyMap.values()).sort((a, b) => a.pedido.localeCompare(b.pedido));
    
    return (
      <FlatList
        data={pedidos}
        keyExtractor={(pedido) => pedido.pedido}
        renderItem={({ item: pedido }) => (
          <View style={styles.hierarchyContainer}>
            {/* Cabecera del Pedido */}
            <View style={styles.hierarchyHeader}>
              <Text style={styles.hierarchyTitle}>üìã Pedido: {pedido.pedido}</Text>
              <Text style={styles.hierarchySubtitle}>
                Tiempo Total: {formatDuration(pedido.totalTime)} | 
                Operarios: {pedido.operarios.size} | 
                Fechas: {Array.from(pedido.fechas).join(', ')}
              </Text>
            </View>
            
            {/* M√≥dulos del Pedido */}
            {Array.from(pedido.modulos.values())
              .sort((a, b) => a.modulo.localeCompare(b.modulo))
              .map(modulo => (
                <View key={modulo.modulo} style={styles.moduloContainer}>
                  {/* Cabecera del M√≥dulo */}
                  <View style={styles.moduloHeader}>
                    <Text style={styles.moduloTitle}>üîß M√≥dulo: {modulo.modulo}</Text>
                    <Text style={styles.moduloSubtitle}>
                      Tiempo: {formatDuration(modulo.totalTime)} | 
                      Operarios: {modulo.operarios.size}
                    </Text>
                  </View>
                  
                  {/* Tareas del M√≥dulo */}
                  {Array.from(modulo.tareas.entries())
                    .sort((a, b) => a[0].localeCompare(b[0]))
                    .map(([tareaKey, tareaRecords]) => (
                      <View key={tareaKey} style={styles.tareaContainer}>
                        <Text style={styles.tareaTitle}>‚öôÔ∏è Tarea: {tareaKey}</Text>
                    
                    {tareaRecords.map(hr => (
                      <View key={hr.operario} style={styles.operarioRecord}>
                        <Text style={styles.operarioTitle}>üë§ {hr.operario}</Text>
                        <Text style={styles.operarioStats}>
                          Registros: {hr.records.length} | 
                          Tiempo: {formatDuration(hr.totalTime)}
                        </Text>
                      </View>
                    ))}
                  </View>
                ))}
              </View>
            ))}
          </View>
        )}
      />
    );
  };

  // Recalcula la lista agrupada seg√∫n filterMode y tiempoRecords
  const computeGroups = (records: TiempoRealRecord[], mode: 'operador'|'tarea'|'pedido') => {
    const map = new Map<string, TiempoRealRecord[]>();
    for (const r of records) {
      let key = 'SIN';
      if (mode === 'operador') key = operarioFirstNameKey(r.OperarioNombre || r.CodigoOperario);
      else if (mode === 'tarea') key = (r.CodigoTarea || 'SIN_TAREA').toString();
      else key = (r.NumeroManual || 'SIN_PEDIDO').toString();

      const arr = map.get(key) || [];
      arr.push(r);
      map.set(key, arr);
    }

    const groups: any[] = [];
    for (const [k, arr] of map.entries()) {
      const last = arr.reduce((a, b) => (recordTimestamp(a) > recordTimestamp(b) ? a : b));
      const estadistica = computeEstadisticaForArray(arr);
      groups.push({ key: k, last, count: arr.length, estadistica, items: arr });
    }
    groups.sort((a,b)=> String(a.key).localeCompare(String(b.key)));
    return groups;
  };

  // Helper para calcular estadistica temporal sobre un array de registros
  const computeEstadisticaForArray = (arr: TiempoRealRecord[]) => {
    // Devuelve lo acumulado (activo/status/remaining). El c√°lculo dependiente del tiempo
    // transcurrido se har√° en render usando `nowTick` para evitar recalcular en helper.
    let active = 0;
    let hasOpen = false;
    let modulos = new Set<string>();
    for (const it of arr) {
      const v = it.TiempoDedicado ?? 0;
      if (typeof v === 'number' && !isNaN(v)) active += v;
      if ((it as any).Abierta === 1 || !it.HoraFin || !it.FechaFin) {
        hasOpen = true;
      }
      if (it.Modulo) modulos.add(it.Modulo);
    }
    const jornadaSeconds = JORNADA_SECONDS || 7.5 * 3600;
    const remaining = Math.max(0, jornadaSeconds - active);
    const status: 'parcial' | 'total' = hasOpen ? 'parcial' : 'total';
    const avgTimePerModulo = modulos.size > 0 ? active / modulos.size : 0;
    const totalModulos = modulos.size;
    return {
      activeSeconds: Math.floor(active),
      status,
      remainingSeconds: Math.floor(remaining),
      avgTimePerModulo,
      totalModulos,
    };
  };

  // Formato abreviado para horas y minutos: 'H h MM'
  const formatHoursMinutes = (seconds?: number | null) => {
    if (seconds == null) return '-';
    const s = Math.max(0, Math.floor(Number(seconds)));
    const hours = Math.floor(s / 3600);
    const mins = Math.floor((s % 3600) / 60);
    return `${hours}h ${String(mins).padStart(2, '0')}m`;
  };

  // Calcular elapsed desde 06:30 hasta `now`, capear por jornada y excluir solapamiento con la pausa de comida 09:30-10:00 (30 minutos)
  const computeEffectiveElapsed = (nowDate?: Date) => {
    const now = nowDate ? new Date(nowDate) : new Date();
    const start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 6, 30, 0);
    let total = Math.floor((now.getTime() - start.getTime()) / 1000);
    if (total < 0) total = 0;
    if (total > (JORNADA_SECONDS || 7.5 * 3600)) total = JORNADA_SECONDS || 7.5 * 3600;

    const breakStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 9, 30, 0);
    const breakEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 10, 0, 0);
    const overlapStart = Math.max(start.getTime(), breakStart.getTime());
    const overlapEnd = Math.min(now.getTime(), breakEnd.getTime());
    let breakOverlap = 0;
    if (overlapEnd > overlapStart) breakOverlap = Math.floor((overlapEnd - overlapStart) / 1000);
    if (breakOverlap > total) breakOverlap = total;

    const effective = Math.max(0, total - breakOverlap);
    return { total, breakOverlap, effective };
  };

  // Recompute groupedList when tiempoRecords or filterMode changes
  useEffect(() => {
    const groups = computeGroups(tiempoRecords, filterMode);
    setGroupedList(groups);
  }, [tiempoRecords, filterMode]);

  // Recompute counts from tiempoRecords
  useEffect(() => {
    const operadorSet = new Set<string>();
    const tareaSet = new Set<string>();
    const pedidoSet = new Set<string>();
    for (const r of tiempoRecords) {
      operadorSet.add(operarioFirstNameKey(r.OperarioNombre || r.CodigoOperario));
      tareaSet.add(String(r.CodigoTarea ?? 'SIN_TAREA'));
      pedidoSet.add(String(r.NumeroManual ?? 'SIN_PEDIDO'));
    }
    setCounts({ operador: operadorSet.size, tarea: tareaSet.size, pedido: pedidoSet.size });
  }, [tiempoRecords]);

  // Filtrar groupedList basado en searchQuery (busca en operario/pedido/tarea)
  const filteredGroupedList = groupedList.filter(group => {
    const key = group.key.toLowerCase();
    const query = searchQuery.toLowerCase();
    return key.includes(query);
  });

  // Estad√≠sticas recomendadas:
  // - Tiempo total dedicado por operario/tarea/pedido.
  // - Tiempo promedio por m√≥dulo (eficiencia).
  // - Productividad: M√≥dulos por hora.
  // - Comparaci√≥n: Percentil de tiempo vs. media de otros operarios en misma tarea.
  // - Tiempo inactivo estimado.
  // - Conclusiones: "Operario X es 20% m√°s r√°pido que el promedio en tarea Y."
  // - Relaci√≥n operarios-pedidos: Operarios que manejan m√°s m√≥dulos por pedido indican complejidad o eficiencia.

  // Helper para calcular estad√≠sticas detalladas en modal
  const computeDetailedStats = (context: 'operador' | 'tarea' | 'pedido', key: string, allRecords: TiempoRealRecord[]) => {
    const groupRecords = allRecords.filter(r => {
      if (context === 'operador') return operarioFirstNameKey(r.OperarioNombre || r.CodigoOperario) === key;
      if (context === 'tarea') return String(r.CodigoTarea ?? 'SIN_TAREA') === key;
      return String(r.NumeroManual ?? 'SIN_PEDIDO') === key;
    });

    // Estad√≠sticas base
    const totalTime = groupRecords.reduce((sum, r) => sum + (r.TiempoDedicado ?? 0), 0);
    const totalModulos = new Set(groupRecords.map(r => r.Modulo ?? '')).size;
    const avgTimePerModulo = totalModulos > 0 ? totalTime / totalModulos : 0;
    const productividad = totalTime > 0 ? (totalModulos / (totalTime / 3600)) : 0; // m√≥dulos por hora

    // Comparaciones
    let comparison = '';
    if (context === 'operador') {
      // Comparar con otros operarios en mismas tareas
      const tareas = [...new Set(groupRecords.map(r => r.CodigoTarea ?? 'SIN'))];
      tareas.forEach(t => {
        const otherOps = allRecords.filter(r => String(r.CodigoTarea ?? 'SIN') === String(t) && operarioFirstNameKey(r.OperarioNombre || r.CodigoOperario) !== key);
        const avgOther = otherOps.length > 0 ? otherOps.reduce((sum, r) => sum + (r.TiempoDedicado ?? 0), 0) / otherOps.length : 0;
        const thisOpAvg = groupRecords.filter(r => String(r.CodigoTarea ?? 'SIN') === String(t)).reduce((sum, r) => sum + (r.TiempoDedicado ?? 0), 0) / groupRecords.length || 0;
        comparison += `En tarea ${t}: ${thisOpAvg > avgOther ? 'M√°s r√°pido' : 'M√°s lento'} que promedio por ${(Math.abs(thisOpAvg - avgOther) / avgOther * 100).toFixed(1)}%.\n`;
      });
    } else if (context === 'tarea') {
      // Comparar operarios en esta tarea
      const ops = [...new Set(groupRecords.map(r => operarioFirstNameKey(r.OperarioNombre || r.CodigoOperario)))];
      ops.forEach(op => {
        const opRecords = groupRecords.filter(r => operarioFirstNameKey(r.OperarioNombre || r.CodigoOperario) === op);
        const opTime = opRecords.reduce((sum, r) => sum + (r.TiempoDedicado ?? 0), 0);
        comparison += `Operario ${op}: Tiempo total ${formatDuration(opTime)}, M√≥dulos: ${new Set(opRecords.map(r => r.Modulo)).size}.\n`;
      });
    } else {
      // Para pedido: tareas y operarios involucrados
      const tareas = [...new Set(groupRecords.map(r => r.CodigoTarea ?? 'SIN'))];
      const ops = [...new Set(groupRecords.map(r => operarioFirstNameKey(r.OperarioNombre || r.CodigoOperario)))];
      comparison = `Tareas: ${tareas.join(', ')}. Operarios: ${ops.join(', ')}.\n`;
    }

    return { totalTime, avgTimePerModulo, productividad, comparison };
  };

  // mientras carga auth o storage, muestra spinner
  if (authLoading || loading) {
    return (
      <View style={styles.center}>
        <ActivityIndicator />
      </View>
    );
  }

  // si no est√° autenticado, ya tienes un useEffect que redirige a /login
  // aqu√≠ no renders nada para evitar parpadeos
  if (!authenticated) return null;

  // si est√° autenticado pero no tiene rol permitido:
  if (!allowed) {
    return (
      <View style={styles.center}>
        <Text style={styles.errorText}>No tiene credenciales para ver esta informaci√≥n</Text>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>

      <AppHeader
        titleOverride="Terminales Moncada"
        count={tiempoRecords.length}
        userNameProp={userData?.nombre || userData?.name || '‚Äî'}
        roleProp={userData?.rol || userData?.role || '‚Äî'}
        serverReachableOverride={!!authenticated}
        onRefresh={() => {
          // refrescar con fechas actuales
          setLoadingTiempo(true);
          fetchTiempoReal(formatDateOnly(fromDate.toISOString()), formatDateOnly(toDate.toISOString()));
        }}
        onUserPress={({ userName, role }) => {
          setModalUser({ userName, role });
          setUserModalVisible(true);
        }}
      />

      <ModalHeader
        visible={userModalVisible}
        onClose={() => setUserModalVisible(false)}
        userName={userData?.nombre || userData?.name || '‚Äî'}
        role={userData?.rol || userData?.role || '‚Äî'}
      />

      {/* Date pickers: calendario visual en web, DateTimePicker en m√≥vil */}
      <View style={styles.datePickerContainer}>
        {Platform.OS === 'web' ? (
          <>
            <label style={{ marginRight: 12 }}>
              Desde:
              <input
                type="date"
                value={formatDateOnly(fromDate.toISOString())}
                onChange={e => {
                  const val = e.target.value;
                  if (val) setFromDate(new Date(val + 'T00:00:00'));
                }}
                style={{ marginLeft: 6, padding: 4 }}
              />
            </label>
            <label>
              Hasta:
              <input
                type="date"
                value={formatDateOnly(toDate.toISOString())}
                onChange={e => {
                  const val = e.target.value;
                  if (val) setToDate(new Date(val + 'T00:00:00'));
                }}
                style={{ marginLeft: 6, padding: 4 }}
              />
            </label>
          </>
        ) : (
          <>
            <TouchableOpacity onPress={() => setShowFromPicker(true)}>
              <Text>Desde: {formatDateOnly(fromDate.toISOString())}</Text>
            </TouchableOpacity>
            {showFromPicker && (
              <DateTimePicker
                value={fromDate}
                mode="date"
                display="calendar"
                onChange={(event, selectedDate) => {
                  setShowFromPicker(false);
                  if (selectedDate) setFromDate(selectedDate);
                }}
              />
            )}
            <TouchableOpacity onPress={() => setShowToPicker(true)}>
              <Text>Hasta: {formatDateOnly(toDate.toISOString())}</Text>
            </TouchableOpacity>
            {showToPicker && (
              <DateTimePicker
                value={toDate}
                mode="date"
                display="calendar"
                onChange={(event, selectedDate) => {
                  setShowToPicker(false);
                  if (selectedDate) setToDate(selectedDate);
                }}
              />
            )}
          </>
        )}
      </View>

      {/* B√∫squeda */}
      <View style={styles.searchContainer}>
        <Ionicons name="search-outline" size={20} color="#757575" />
        <TextInput
          style={styles.searchInput}
          placeholder="Buscar operario / pedido / tarea"
          value={searchQuery}
          onChangeText={setSearchQuery}
        />
      </View>

      {/* Detail modal for selected group with hierarchical view */}
      <Modal
        visible={detailModalVisible}
        animationType="slide"
        onRequestClose={() => setDetailModalVisible(false)}
      >
        <View style={[styles.modalContainer, isMobile ? styles.modalContainerMobile : { padding: 12 }]}>
          <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
            <Text style={{ fontSize: 18, fontWeight: '700' }}>{selectedGroupKey}</Text>
            <TouchableOpacity onPress={() => setDetailModalVisible(false)} style={{ padding: 8 }}>
              <Text style={{ color: '#ef4444' }}>Cerrar</Text>
            </TouchableOpacity>
          </View>

          {/* Mostrar estad√≠sticas detalladas */}
          {modalContext && selectedGroupKey && (() => {
            const stats = computeDetailedStats(modalContext, selectedGroupKey, tiempoRecords);
            return (
              <View style={styles.statsContainer}>
                <Text style={styles.statsTitle}>Estad√≠sticas</Text>
                <Text>Tiempo Total: {formatDuration(stats.totalTime)}</Text>
                <Text>Tiempo Promedio por M√≥dulo: {formatDuration(stats.avgTimePerModulo)}</Text>
                <Text>Productividad (M√≥dulos/Hora): {stats.productividad.toFixed(2)}</Text>
                <Text>Conclusiones: {stats.comparison}</Text>
              </View>
            );
          })()}

          {/* Renderizar vista jer√°rquica seg√∫n el contexto */}
          <View style={{ flex: 1 }}>
            {modalContext === 'operador' && renderOperarioHierarchy(detailList)}
            {modalContext === 'tarea' && renderTareaHierarchy(detailList)}
            {modalContext === 'pedido' && renderPedidoHierarchy(detailList)}
          </View>
        </View>
      </Modal>

      {/* Lista agrupada tiempo-real */}
      <View style={{ flex: 1, paddingHorizontal: 12, paddingVertical: 8 }}>
        <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>
          <TouchableOpacity style={[styles.filterButton, filterMode === 'operador' && styles.filterButtonActive, isMobile && styles.filterButtonMobile]} onPress={() => setFilterMode('operador')}>
            <Text style={[styles.filterText, filterMode === 'operador' && styles.filterTextActive]}>Operador{filterMode === 'operador' ? ` ¬∑ ${counts.operador}` : ''}</Text>
          </TouchableOpacity>
          <TouchableOpacity style={[styles.filterButton, filterMode === 'tarea' && styles.filterButtonActive, isMobile && styles.filterButtonMobile]} onPress={() => setFilterMode('tarea')}>
            <Text style={[styles.filterText, filterMode === 'tarea' && styles.filterTextActive]}>Tarea{filterMode === 'tarea' ? ` ¬∑ ${counts.tarea}` : ''}</Text>
          </TouchableOpacity>
          <TouchableOpacity style={[styles.filterButton, filterMode === 'pedido' && styles.filterButtonActive, isMobile && styles.filterButtonMobile]} onPress={() => setFilterMode('pedido')}>
            <Text style={[styles.filterText, filterMode === 'pedido' && styles.filterTextActive]}>Pedido{filterMode === 'pedido' ? ` ¬∑ ${counts.pedido}` : ''}</Text>
          </TouchableOpacity>
        </View>

        {loadingTiempo ? (
          <ActivityIndicator />
        ) : (
          <FlatList
            data={filteredGroupedList}
            keyExtractor={(item) => item.key}
            style={[isWeb ? styles.flatListWeb : styles.flatListMobile, { flex: 1 }]}
            contentContainerStyle={{ paddingBottom: 24 }}
            nestedScrollEnabled
            renderItem={({ item }) => {
              const last: TiempoRealRecord = item.last;
              // Mostrar campos seg√∫n filterMode
              let title = item.key;
              let subtitle = '';

              let badges: Array<{ key: string; label: string }> = [];
              if (filterMode === 'operador') {
                title = item.key; // Operario first-name key (already normalized)
                badges = [
                  { key: 'tarea', label: String(last.CodigoTarea ?? '-') },
                  { key: 'numero', label: String(last.NumeroManual ?? '-') },
                  { key: 'modulo', label: String(last.Modulo ?? '-') },
                  { key: 'dur', label: formatDuration(last.TiempoDedicado ?? null) },
                  { key: 'horas', label: `${last.HoraInicio ?? '-'}‚Üí${last.HoraFin ?? '-'}` },
                ];
              } else if (filterMode === 'tarea') {
                title = item.key; // CodigoTarea
                badges = [
                  { key: 'oper', label: operarioFirstNameKey(last.OperarioNombre || last.CodigoOperario) },
                  { key: 'numero', label: String(last.NumeroManual ?? '-') },
                  { key: 'modulo', label: String(last.Modulo ?? '-') },
                  { key: 'dur', label: formatDuration(last.TiempoDedicado ?? null) },
                ];
              } else {
                title = item.key; // NumeroManual
                badges = [
                  { key: 'tarea', label: String(last.CodigoTarea ?? '-') },
                  { key: 'modulo', label: String(last.Modulo ?? '-') },
                  { key: 'puesto', label: String(last.CodigoPuesto ?? '-') },
                  { key: 'dur', label: formatDuration(last.TiempoDedicado ?? null) },
                ];
              }

              const isHighlighted = highlightedGroups[item.key];
              return (
                <TouchableOpacity key={item.key} style={[styles.card, isHighlighted ? { backgroundColor: '#fff7e6' } : undefined]} onPress={() => {
                  // abrir modal con todos los items del grupo
                  const all = tiempoRecords.filter((r) => {
                    if (filterMode === 'operador') return operarioFirstNameKey(r.OperarioNombre || r.CodigoOperario) === item.key;
                    if (filterMode === 'tarea') return (r.CodigoTarea || 'SIN_TAREA').toString() === item.key;
                    return (r.NumeroManual || 'SIN_PEDIDO').toString() === item.key;
                  });
                  setDetailList(all.sort((a,b)=> recordTimestamp(b) - recordTimestamp(a)));
                  setSelectedGroupKey(item.key);
                  setModalContext(filterMode);
                  setDetailModalVisible(true);
                }}>
                  <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
                    <Text style={{ fontWeight: '700', color: COLORS.primary }}>{title}</Text>
                    <View style={{ alignItems: 'flex-end' }}>
                      <Text style={{ color: '#6b7280', fontWeight: '600' }}>{item.count}</Text>
                      {item.estadistica ? (() => {
                        const now = new Date(nowTick);
                        const { total, breakOverlap, effective } = computeEffectiveElapsed(now);
                        let elapsed = effective; // effective elapsed (excluye pausa comida)
                        if (elapsed > (JORNADA_SECONDS || 7.5 * 3600)) elapsed = JORNADA_SECONDS || 7.5 * 3600;

                        // detectar si esta tarjeta de tarea aplica a mas de un operario
                        let isTareaMultiOperator = false;
                        if (filterMode === 'tarea') {
                          const groupItems = item.items ?? [];
                          const ops = new Set(groupItems.map((x:any) => operarioFirstNameKey(x.OperarioNombre || x.CodigoOperario)));
                          isTareaMultiOperator = ops.size > 1;
                        }

                        if (isTareaMultiOperator) {
                          // mostrar una flecha hacia abajo / mensaje indicando revisar la tabla individual
                          return (
                            <View style={styles.estadisticaContainerInline}>
                              <Text style={{ fontWeight: '700', color: '#374151' }}>‚¨á Mira desglose individual</Text>
                            </View>
                          );
                        }

                        // Caso normal: mostrar Act/Inac/Estado/Valor
                        const inactive = Math.max(0, elapsed - (item.estadistica.activeSeconds || 0));
                        const percentActivity = elapsed > 0 ? Math.max(0, Math.min(100, Math.round(((item.estadistica.activeSeconds || 0) / elapsed) * 100))) : 0;
                        return (
                          <View style={styles.estadisticaContainerInline}>
                            <View style={styles.estadisticaInlineBlock}>
                              <Text style={styles.estadisticaLabel}>Act</Text>
                              <Text style={styles.estadisticaValue}>{formatHoursMinutes(item.estadistica.activeSeconds)}</Text>
                            </View>
                            <View style={styles.estadisticaInlineBlock}>
                              <Text style={styles.estadisticaLabel}>Inac</Text>
                              <Text style={styles.estadisticaValue}>{formatHoursMinutes(inactive)}</Text>
                            </View>
                            <Text style={item.estadistica.status === 'parcial' ? styles.estadisticaStatusParcial : styles.estadisticaStatus}>{item.estadistica.status.toUpperCase()}</Text>
                            <View style={styles.estadisticaInlineBlock}>
                              <View style={styles.valorBadgeInline}>
                                <Text style={styles.valorLabel}>Valor</Text>
                                <Text style={styles.valorPercent}>{percentActivity}%</Text>
                              </View>
                            </View>
                          </View>
                        );
                      })() : null}
                    </View>
                  </View>
                  <View style={{ flexDirection: 'row', flexWrap: 'wrap', marginTop: 6, gap: 6 }}>
                    {badges.map(b => (
                      <View key={b.key} style={styles.badge}><Text style={styles.badgeText}>{b.label}</Text></View>
                    ))}
                  </View>

                  {/* Si estamos viendo por tarea, mostrar desglose por operario si hay >1 operario */}
                  {filterMode === 'tarea' && (() => {
                    // agrupar por operario dentro del grupo
                    const opMap = new Map<string, { active: number; count: number; anyOpen: boolean }>();
                    const groupItems = item.items ?? [];
                    for (const it of groupItems) {
                      const op = operarioFirstNameKey(it.OperarioNombre || it.CodigoOperario);
                      const s = opMap.get(op) || { active: 0, count: 0, anyOpen: false };
                      s.active += (it.TiempoDedicado ?? 0) as number;
                      s.count += 1;
                      if ((it as any).Abierta === 1 || !it.HoraFin || !it.FechaFin) s.anyOpen = true;
                      opMap.set(op, s);
                    }
                    if (opMap.size <= 1) return null;

                    const now = new Date(nowTick);
                    const { total, breakOverlap, effective } = computeEffectiveElapsed(now);
                    let elapsed = effective;
                    if (elapsed > JORNADA_SECONDS) elapsed = JORNADA_SECONDS;

                    let totalActive = 0;
                    const rows: Array<{ op: string; active: number; inactive: number; status: 'parcial'|'total'; percent: number }> = [];
                    for (const [op, v] of opMap.entries()) {
                      const active = Math.floor(v.active);
                      totalActive += active;
                      const inactive = Math.max(0, elapsed - active);
                      const status: 'parcial'|'total' = v.anyOpen ? 'parcial' : 'total';
                      const percent = elapsed > 0 ? Math.round((active / elapsed) * 100) : 0;
                      rows.push({ op, active, inactive, status, percent });
                    }

                    return (
                      <View style={{ marginTop: 8, padding: 8, backgroundColor: '#fbfbfe', borderRadius: 8 }}>
                        <Text style={{ fontWeight: '700', marginBottom: 6 }}>Desglose por operario</Text>
                        <View style={{ flexDirection: 'row', paddingVertical: 6, borderBottomWidth: 1, borderBottomColor: '#e6eef6' }}>
                          <Text style={{ flex: 2, fontWeight: '700' }}>Operario</Text>
                          <Text style={{ flex: 1, textAlign: 'right', fontWeight: '700' }}>Act</Text>
                          <Text style={{ flex: 1, textAlign: 'right', fontWeight: '700' }}>Inac</Text>
                          <Text style={{ width: 80, textAlign: 'right', fontWeight: '700' }}>Estado</Text>
                          <Text style={{ width: 72, textAlign: 'right', fontWeight: '700' }}>Valor</Text>
                        </View>

                        {rows.map(r => (
                          <View key={r.op} style={{ flexDirection: 'row', paddingVertical: 6, borderBottomWidth: 1, borderBottomColor: '#f1f5f9' }}>
                            <Text style={{ flex: 2 }}>{r.op}</Text>
                            <Text style={{ flex: 1, textAlign: 'right' }}>{formatHoursMinutes(r.active)}</Text>
                            <Text style={{ flex: 1, textAlign: 'right' }}>{formatHoursMinutes(r.inactive)}</Text>
                            <Text style={[{ width: 80, textAlign: 'right', fontWeight: '700' }, r.status === 'parcial' ? styles.estadisticaStatusParcial : styles.estadisticaStatus]}>{r.status.toUpperCase()}</Text>
                            <Text style={{ width: 72, textAlign: 'right' }}>{r.percent}%</Text>
                          </View>
                        ))}
                        <View style={{ flexDirection: 'row', paddingVertical: 8, marginTop: 6, borderTopWidth: 1, borderTopColor: '#e6eefreaKey}</Text>
                        
                        {/* Registros por Operario en esta Tarea */}
                        {tareaRecords
                          .sort((a, b) => a.operario.localeCompare(b.operario))
                          .map(hr => (
                            <View key={`${hr.operario}-${tareaKey}`} style={styles.operarioRecord}>
                              <Text style={styles.operarioTitle}>üë§ {hr.operario}</Text>
                              <Text style={styles.operarioStats}>
                                Registros: {hr.records.length} | 
                                Tiempo Total: {formatDuration(hr.totalTime)} | 
                                Fechas: {hr.fechas.join(', ')}
                              </Text>
                              
                              {/* Detalles individuales */}
                              <View style={styles.recordsContainer}>
                                {hr.records
                                  .sort((a, b) => recordTimestamp(a) - recordTimestamp(b))
                                  .map((record, idx) => (
                                    <View key={idx} style={styles.individualRecord}>
                                      <Text style={styles.recordText}>
                                        üìÖ {formatDateOnly(record.FechaInicio || record.Fecha)} | 
                                        üïê {record.HoraInicio || '-'} ‚Üí {record.HoraFin || '-'} | 
                                        ‚è±Ô∏è {formatDuration(record.TiempoDedicado)}
                                      </Text>
                                      {record.CodigoPuesto && (
                                        <Text style={styles.recordMeta}>Puesto: {record.CodigoPuesto}</Text>
                                      )}
                                    </View>
                                  ))}
                              </View>
                            </View>
                          ))}
                      </View>
                    ))}
                </View>
              ))}
          </View>
        )}
      />
    );
  };

  // NUEVA FUNCI√ìN: Renderizar vista jer√°rquica para tareas
  const renderTareaHierarchy = (records: TiempoRealRecord[]) => {
    // Agrupar por tarea primero, luego por pedido->modulo
    const tareaMap = new Map<string, Map<string, PedidoGroup>>();
    
    for (const record of records) {
      const tarea = record.CodigoTarea || 'SIN_TAREA';
      
      if (!tareaMap.has(tarea)) {
        tareaMap.set(tarea, new Map<string, PedidoGroup>());
      }
      
      const pedidosMap = tareaMap.get(tarea)!;
      const hierarchyForTarea = createHierarchicalStructure([record]);
      
      // Fusionar con la estructura existente
      for (const [pedidoKey, pedidoGroup] of hierarchyForTarea.entries()) {
        if (!pedidosMap.has(pedidoKey)) {
          pedidosMap.set(pedidoKey, {
            pedido: pedidoKey,
            modulos: new Map(),
            totalTime: 0,
            operarios: new Set(),
            fechas: new Set()
          });
        }
        
        const existingPedido = pedidosMap.get(pedidoKey)!;
        existingPedido.totalTime += pedidoGroup.totalTime;
        
        for (const operario of pedidoGroup.operarios) {
          existingPedido.operarios.add(operario);
        }
        for (const fecha of pedidoGroup.fechas) {
          existingPedido.fechas.add(fecha);
        }
        
        // Fusionar m√≥dulos
        for (const [moduloKey, moduloGroup] of pedidoGroup.modulos.entries()) {
          if (!existingPedido.modulos.has(moduloKey)) {
            existingPedido.modulos.set(moduloKey, {
              modulo: moduloKey,
              tareas: new Map(),
              totalTime: 0,
              operarios: new Set(),
              fechas: new Set()
            });
          }
          
          const existingModulo = existingPedido.modulos.get(moduloKey)!;
          existingModulo.totalTime += moduloGroup.totalTime;
          
          for (const operario of moduloGroup.operarios) {
            existingModulo.operarios.add(operario);
          }
          for (const fecha of moduloGroup.fechas) {
            existingModulo.fechas.add(fecha);
          }
          
          // Fusionar registros de tarea
          for (const [tareaKey, hierarchicalRecords] of moduloGroup.tareas.entries()) {
            if (!existingModulo.tareas.has(tareaKey)) {
              existingModulo.tareas.set(tareaKey, []);
            }
            existingModulo.tareas.get(tareaKey)!.push(...hierarchicalRecords);
          }
        }
      }
    }
    
    const tareas = Array.from(tareaMap.entries()).sort((a, b) => a[0].localeCompare(b[0]));
    
    return (
      <FlatList
        data={tareas}
        keyExtractor={(item) => item[0]}
        renderItem={({ item: [tareaKey, pedidosMap] }) => (
          <View style={styles.hierarchyContainer}>
            <View style={styles.hierarchyHeader}>
              <Text style={styles.hierarchyTitle}>‚öôÔ∏è Tarea: {tareaKey}</Text>
            </View>
            
            {Array.from(pedidosMap.values()).map(pedido => (
              <View key={pedido.pedido} style={styles.pedidoInTareaContainer}>
                <Text style={styles.pedidoInTareaTitle}>üìã {pedido.pedido}</Text>
                
                {Array.from(pedido.modulos.values()).map(modulo => (
                  <View key={modulo.modulo} style={styles.moduloContainer}>
                    <Text style={styles.moduloTitle}>üîß {modulo.modulo}</Text>
                    
                    {Array.from(modulo.tareas.get(tareaKey) || []).map(hr => (
                      <View key={hr.operario} style={styles.operarioRecord}>
                        <Text style={styles.operarioTitle}>üë§ {hr.operario}</Text>
                        <Text style={styles.operarioStats}>
                          Registros: {hr.records.length} | 
                          Tiempo: {formatDuration(hr.totalTime)}
                        </Text>
                      </View>
                    ))}
                  </View>
                ))}
              </View>
            ))}
          </View>
        )}
      />
    );
  };

  // NUEVA FUNCI√ìN: Renderizar vista jer√°rquica para pedidos
  const renderPedidoHierarchy = (records: TiempoRealRecord[]) => {
    const hierarchyMap = createHierarchicalStructure(records);
    const pedidos = Array.from(hierarchyMap.values()).sort((a, b) => a.pedido.localeCompare(b.pedido));
    
    return (
      <FlatList
        data={pedidos}
        keyExtractor={(pedido) => pedido.pedido}
        renderItem={({ item: pedido }) => (
          <View style={styles.hierarchyContainer}>
            <View style={styles.hierarchyHeader}>
              <Text style={styles.hierarchyTitle}>üìã Pedido: {pedido.pedido}</Text>
              <Text style={styles.hierarchySubtitle}>
                Tiempo Total: {formatDuration(pedido.totalTime)} | 
                Operarios: {pedido.operarios.size} | 
                M√≥dulos: {pedido.modulos.size}
              </Text>
            </View>
            
            {Array.from(pedido.modulos.values()).map(modulo => (
              <View key={modulo.modulo} style={styles.moduloContainer}>
                <Text style={styles.moduloTitle}>üîß M√≥dulo: {modulo.modulo}</Text>
                
                {Array.from(modulo.tareas.entries()).map(([tareaKey, tareaRecords]) => (
                  <View key={tareaKey} style={styles.tareaContainer}>
                    <Text style={styles.tareaTitle}>‚öôÔ∏è Tarea: {ta