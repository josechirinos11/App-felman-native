import Ionicons from '@expo/vector-icons/Ionicons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useEffect, useState } from 'react';
import { ActivityIndicator, FlatList, Modal, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { API_URL } from '../../config/constants';
import { useOfflineMode } from '../../hooks/useOfflineMode';

// Definir tipo para las entregas
interface Entrega {
  Id_Entrega: number;
  FechaEnvio: string;
  EntregaConfirmada: number;
  EstadoCarga: string;
  ObservaGral: string | null;
  Id_LineaEntrega: number;
  Id_Pedido: number;
  Observaciones: string | null;
  NCaballetes: number;
  NBultos: number;
  Id_ResponsableEnvio: number;
  Id_EstadoEntrega: number;
  DocuAdjunta: number;
  Id_LugarEntrega: number;
  NSCaballetes: string | null;
  NoPedido: string;
  RefCliente: string;
  Cliente: string;
  Comercial: string;
}

export default function ControlEntregasDiariasScreen() {
  const [data, setData] = useState<Entrega[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [loading, setLoading] = useState(true);  const [userName, setUserName] = useState<string | null>(null);
  const [userRole, setUserRole] = useState<string | null>(null);
  const [fechaDesde, setFechaDesde] = useState('');
  const [fechaHasta, setFechaHasta] = useState('');
  const [showDateFilter, setShowDateFilter] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedEntrega, setSelectedEntrega] = useState<Entrega | null>(null);
  const [usingDefaultFilter, setUsingDefaultFilter] = useState(true); // Indica si se está usando el filtro por defecto
  const [showFilters, setShowFilters] = useState(false); // Controla si se muestran los filtros
  const [infoModalVisible, setInfoModalVisible] = useState(false); // Modal para observaciones generales
  const [selectedEntregaInfo, setSelectedEntregaInfo] = useState<Entrega | null>(null);
  const pageSize = 20;

  // Función para obtener la fecha del día anterior en formato YYYY-MM-DD
  const getYesterdayDate = () => {
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    return yesterday.toISOString().split('T')[0];
  };
  
  // Usar el hook de modo offline
  const { isConnected, serverReachable, isCheckingConnection, tryAction } = useOfflineMode();
  
  const fetchEntregas = async (showAlert = false) => {
    try {
      setLoading(true);
      
      console.log('🔄 Iniciando fetch de entregas desde:', `${API_URL}/control-access/controlEntregaDiaria`);
      
      if (showAlert) {
        // Usar tryAction solo cuando el usuario presiona refresh (mostrará alert si hay error)
        const result = await tryAction(async () => {
          console.log('📡 Haciendo fetch con tryAction...');
          const res = await fetch(`${API_URL}/control-access/controlEntregaDiaria`);
          console.log('📡 Respuesta recibida - Status:', res.status, 'OK:', res.ok);
          
          const data = await res.json();
          console.log('📊 Datos recibidos (tipo):', typeof data);
          console.log('📊 Es array:', Array.isArray(data));
          console.log('📊 Cantidad de registros:', Array.isArray(data) ? data.length : 'No es array');
          
          if (Array.isArray(data) && data.length > 0) {
            console.log('📋 Primer registro de ejemplo:', JSON.stringify(data[0], null, 2));
            console.log('📋 Último registro de ejemplo:', JSON.stringify(data[data.length - 1], null, 2));
          }
          
          return Array.isArray(data) ? data : [];
        }, true, "No se pudieron cargar las entregas. Verifique su conexión.");
        
        if (result !== null) {
          console.log('✅ Datos procesados exitosamente. Total de entregas:', result.length);
          setData(result);
          setCurrentPage(1);
        } else {
          console.log('❌ No se pudieron obtener datos (result es null)');
          // Si no hay conexión, se mantienen los datos existentes o se muestran datos vacíos
          if (!data.length) setData([]);
        }
      } else {
        // Carga inicial sin mostrar alert
        try {
          console.log('📡 Haciendo fetch inicial...');
          const res = await fetch(`${API_URL}/control-access/controlEntregaDiaria`);
          console.log('📡 Respuesta inicial - Status:', res.status, 'OK:', res.ok);
          
          if (res.ok) {
            const result = await res.json();
            console.log('📊 Datos iniciales recibidos (tipo):', typeof result);
            console.log('📊 Es array:', Array.isArray(result));
            console.log('📊 Cantidad de registros iniciales:', Array.isArray(result) ? result.length : 'No es array');
            
            if (Array.isArray(result) && result.length > 0) {
              console.log('📋 Primer registro inicial:', JSON.stringify(result[0], null, 2));
              console.log('📋 Campos disponibles:', Object.keys(result[0]));
            }
            
            setData(Array.isArray(result) ? result : []);
            setCurrentPage(1);
            console.log('✅ Datos iniciales procesados exitosamente');
          } else {
            console.log('❌ Error en la respuesta del servidor:', res.status);
            setData([]);
          }
        } catch (fetchError) {
          console.log('❌ Error de conexión en carga inicial:', fetchError);
          setData([]);
        }
      }
    } catch (error) {
      console.error('Error al obtener entregas:', error);
      setData([]);
      setCurrentPage(1);
    } finally {
      setLoading(false);
    }
  };
  useEffect(() => {
    fetchEntregas();
  }, []);
  // Obtener datos de usuario
  useEffect(() => {
    const getUserData = async () => {
      try {
        const userDataString = await AsyncStorage.getItem('userData');
        console.log('UserData:', userDataString);
        if (userDataString) {
          const userData = JSON.parse(userDataString);
          const userName = userData.nombre || userData.name;
          const userRole = userData.rol || userData.role;
          
          console.log('Nombre de usuario extraído:', userName);
          console.log('Rol de usuario extraído:', userRole);
          
          setUserName(userName);
          setUserRole(userRole);
        }
      } catch (e) {
        console.error('Error al obtener userData:', e);
      }
    };
      getUserData();
  }, []);
  
  // Reiniciar paginación cuando cambien los filtros
  useEffect(() => {
    setCurrentPage(1);
  }, [searchQuery, fechaDesde, fechaHasta]);
  
  // Desactivar filtro por defecto cuando se establezcan fechas personalizadas
  useEffect(() => {
    if (fechaDesde || fechaHasta) {
      setUsingDefaultFilter(false);
    }
  }, [fechaDesde, fechaHasta]);

const filtrarPorRolYBusqueda = (entregas: Entrega[]) => {
    console.log('🔍 Iniciando filtrado. Datos originales:', entregas.length);
    let resultado = [...entregas];

    // Filtrar por rol
    if ((userRole === 'comercial' || userRole === 'Comercial') && userName) {
      console.log('🏷️ Filtrando por comercial:', userName);
      // Limpiar y normalizar los nombres para comparación (quitar espacios extra y convertir a minúsculas)
      const nombreUsuarioNormalizado = userName.toLowerCase().trim();
      resultado = resultado.filter(e => {
        const nombreComercialNormalizado = e.Comercial.toLowerCase().trim();
        const coincide = nombreComercialNormalizado === nombreUsuarioNormalizado;        if (coincide) {
          console.log('✅ Entrega coincide:', e.NoPedido, '- Comercial:', e.Comercial);
        }
        return coincide;
      });
      console.log('📊 Entregas filtradas por comercial:', resultado.length);
    } else {
      console.log('ℹ️ No se aplica filtro por comercial. Rol:', userRole, 'Nombre:', userName);
    }

    // Aplicar filtro por defecto (día anterior) o filtro personalizado
    if (fechaDesde || fechaHasta) {
      // Filtro personalizado 
      console.log('📅 Aplicando filtro personalizado. Desde:', fechaDesde, 'Hasta:', fechaHasta);
      const resultadoAntesFechas = resultado.length;
      resultado = resultado.filter(e => {
        const fechaEntrega = new Date(e.FechaEnvio);
        let cumpleFiltro = true;

        if (fechaDesde) {
          const fechaInicioFiltro = new Date(fechaDesde);
          fechaInicioFiltro.setHours(0, 0, 0, 0);
          cumpleFiltro = cumpleFiltro && fechaEntrega >= fechaInicioFiltro;
        }

        if (fechaHasta) {
          const fechaFinFiltro = new Date(fechaHasta);
          fechaFinFiltro.setHours(23, 59, 59, 999);
          cumpleFiltro = cumpleFiltro && fechaEntrega <= fechaFinFiltro;
        }

        if (cumpleFiltro) {
          console.log('📅 Entrega dentro del rango personalizado:', e.NoPedido, '- Fecha:', e.FechaEnvio);
        }
        return cumpleFiltro;
      });
      console.log(`📊 Filtrado por fechas personalizadas: ${resultadoAntesFechas} → ${resultado.length}`);
    } else if (usingDefaultFilter) {
      // Filtro por defecto - solo el día anterior
      const yesterday = getYesterdayDate();
      console.log('📅 Aplicando filtro por defecto (día anterior):', yesterday);
      const resultadoAntesFechas = resultado.length;
      resultado = resultado.filter(e => {
        const fechaEntrega = new Date(e.FechaEnvio);
        const fechaEntregaStr = fechaEntrega.toISOString().split('T')[0];
        const coincide = fechaEntregaStr === yesterday;
        if (coincide) {
          console.log('📅 Entrega del día anterior:', e.NoPedido, '- Fecha:', e.FechaEnvio);
        }
        return coincide;
      });
      console.log(`📊 Filtrado por día anterior: ${resultadoAntesFechas} → ${resultado.length}`);
    }

    // Filtrar por búsqueda
    if (searchQuery) {
      console.log('🔎 Aplicando filtro de búsqueda:', searchQuery);
      const resultadoAntesBusqueda = resultado.length;
      const query = searchQuery.toLowerCase();
      resultado = resultado.filter(e =>
        e.NoPedido.toLowerCase().includes(query) ||
        e.Cliente.toLowerCase().includes(query) ||
        e.RefCliente.toLowerCase().includes(query)
      );
      console.log(`📊 Filtrado por búsqueda: ${resultadoAntesBusqueda} → ${resultado.length}`);
    }
    
    // Ordenar primero por Id_Entrega (de mayor a menor) y luego por fecha de envío
    resultado.sort((a, b) => {
      // Primero ordenar por Id_Entrega (de mayor a menor)
      if (a.Id_Entrega !== b.Id_Entrega) {
        return b.Id_Entrega - a.Id_Entrega; // Orden descendente por Id_Entrega
      }
        // Si los ID son iguales, ordenar por fecha (de más reciente a más antigua)
      const fechaA = new Date(a.FechaEnvio).getTime();
      const fechaB = new Date(b.FechaEnvio).getTime();
      return fechaB - fechaA;
    });

    console.log('✅ Filtrado completado. Resultado final:', resultado.length);
    if (resultado.length > 0) {
      console.log('📋 Primeros 3 registros filtrados:', resultado.slice(0, 3).map(e => ({
        NoPedido: e.NoPedido,
        Cliente: e.Cliente,
        Comercial: e.Comercial,
        FechaEnvio: e.FechaEnvio,
        Id_Entrega: e.Id_Entrega
      })));
    }

    return resultado;
  };
  
  const renderEntrega = ({ item }: { item: Entrega }) => {
    // Agrupar entregas solo por fecha, ya no por estado
    const group = data.filter(
      e => e.FechaEnvio === item.FechaEnvio
    );    // Formatear la fecha para mostrarla como día, mes y año
    const formatearFecha = (fecha: string) => {
      try {
        const date = new Date(fecha);
        return date.toLocaleDateString('es-ES', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        });
      } catch (error) {
        return fecha || 'Fecha desconocida';
      }
    };
    
    const fechaFormateada = formatearFecha(item.FechaEnvio);

    return (
      <TouchableOpacity
        style={[
          styles.entregaItem,
          { backgroundColor: item.EntregaConfirmada ? '#e6ffe6' : '#fff' }
        ]}
        onPress={() => {
          setSelectedEntrega(item);
          setModalVisible(true);
        }}
      >
        <Text style={styles.pedidoNumero}>Nº Pedido: {item.NoPedido}</Text>
        <Text style={styles.entregaText}>ID Entrega: {item.Id_Entrega}</Text>
        <Text style={styles.entregaText}>Comercial: {item.Comercial}</Text>
        <Text style={styles.entregaText}>Cliente: {item.Cliente}</Text>
        <Text style={styles.entregaText}>Ref. Cliente: {item.RefCliente}</Text>
        <Text style={styles.entregaText}>Fecha de envío: {fechaFormateada}</Text>
        
        {/* Indicador de que hay observaciones */}
        {item.ObservaGral && (
          <View style={styles.observacionIndicador}>
            <Ionicons name="document-text-outline" size={16} color="#2e78b7" />
            <Text style={styles.observacionTexto}>Ver observaciones</Text>
          </View>
        )}
      </TouchableOpacity>
    );
  };
  
  // Modificar la lista de datos para mostrar solo un elemento por grupo de fecha
  const groupedData = data
    .reduce((acc: Entrega[], current) => {
      if (!current.FechaEnvio || !current.Id_Entrega) return acc;
      
      const exists = acc.find(
        item => 
          item.FechaEnvio === current.FechaEnvio
      );
      
      if (!exists) {
        acc.push(current);
      }
      return acc;
    }, [])
    .sort((a, b) => {
      // Primero ordenar por Id_Entrega (de mayor a menor)
      if (a.Id_Entrega !== b.Id_Entrega) {
        return b.Id_Entrega - a.Id_Entrega; // Orden descendente por Id_Entrega
      }
      
      // Si los ID son iguales, ordenar por fecha (de más reciente a más antigua)
      const fechaA = new Date(a.FechaEnvio).getTime();
      const fechaB = new Date(b.FechaEnvio).getTime();
        return fechaB - fechaA;
    });

  const datosFiltrados = filtrarPorRolYBusqueda(data);
  const datosPaginados = datosFiltrados.slice(0, currentPage * pageSize);
  
  // Función para generar keys únicos para el FlatList
  const generateKey = (item: Entrega, index: number) => {
    // Usamos el índice para garantizar claves únicas incluso si hay duplicados
    return `${item.Id_Entrega || ''}-${item.FechaEnvio || ''}-${index}`;
  };
  const handleRefresh = () => {
    fetchEntregas(true); // true para mostrar alert si hay error
  };

  // Función para formatear fecha a YYYY-MM-DD
  const formatDateToInput = (date: Date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };
  
  // Función para limpiar filtros de fecha
  const limpiarFiltrosFecha = () => {
    setFechaDesde('');
    setFechaHasta('');
    setUsingDefaultFilter(false); // Desactivar filtro por defecto para mostrar todos los datos (90 días)
  };
  
  // Función para activar el filtro por defecto (día anterior)
  const activarFiltroDiaAnterior = () => {
    setFechaDesde('');
    setFechaHasta('');
    setUsingDefaultFilter(true);
  };  // Función para obtener el texto del estado del filtro
  const getFilterStatusText = () => {
    if (fechaDesde || fechaHasta) {
      return 'personalizado';
    }
    if (usingDefaultFilter) {
      return '1d';
    }
    return 'todas';
  };

  // Función para mostrar el modal de observaciones generales
  const mostrarInfoObservaciones = () => {
    // Buscar una entrega que tenga observaciones generales
    const entregaConObservaciones = datosFiltrados.find(entrega => entrega.ObservaGral);
    if (entregaConObservaciones) {
      setSelectedEntregaInfo(entregaConObservaciones);
      setInfoModalVisible(true);
    }
  };// Función para establecer filtros rápidos
  const setFiltroRapido = (dias: number) => {
    const hoy = new Date();
    const fechaInicio = new Date();
    fechaInicio.setDate(hoy.getDate() - dias);
    
    setFechaDesde(formatDateToInput(fechaInicio));
    setFechaHasta(formatDateToInput(hoy));
    // No necesitamos setUsingDefaultFilter(false) aquí, el useEffect se encarga de eso
  };  return (
    <SafeAreaView style={styles.container}>
      {/* Header compacto con información de estado */}
      <View style={styles.compactHeader}>
        <View style={styles.headerRow}>
          <Text style={styles.title}>Entregas Diarias</Text>
          <View style={styles.headerActions}>
            <TouchableOpacity
              style={styles.infoButton}
              onPress={mostrarInfoObservaciones}
            >
              <Ionicons name="information-circle-outline" size={20} color="#2e78b7" />
              <Text style={styles.infoButtonText}>Info</Text>
            </TouchableOpacity>
            
            <TouchableOpacity
              style={styles.filterIndicatorButton}
              onPress={() => setShowFilters(!showFilters)}
            >
              <Ionicons 
                name={showFilters ? "chevron-up" : "filter"} 
                size={20} 
                color="#2e78b7" 
              />
              <Text style={styles.filterIndicatorText}>
                {getFilterStatusText()}
              </Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              onPress={handleRefresh} 
              style={styles.compactRefreshButton}
              disabled={isCheckingConnection}
            >
              {isCheckingConnection ? 
                <ActivityIndicator size="small" color="#2e78b7" /> :
                <Ionicons name="refresh" size={20} color="#2e78b7" />
              }
            </TouchableOpacity>
          </View>
        </View>
        
        {/* Información de conexión y resultados en una línea */}
        <View style={styles.statusRow}>
          <View style={styles.connectionBadge}>
            <Ionicons 
              name={serverReachable ? "wifi" : "wifi-outline"}
              size={12} 
              color={serverReachable ? "#4CAF50" : "#F44336"} 
            />
            <Text style={[styles.connectionBadgeText, { color: serverReachable ? "#4CAF50" : "#F44336" }]}>
              {serverReachable ? "Online" : "Offline"}
            </Text>
          </View>
          
          {!loading && (
            <Text style={styles.resultsCount}>
              {datosFiltrados.length} entregas ({getFilterStatusText()})
            </Text>
          )}
        </View>
      </View>

      {/* Barra de búsqueda siempre visible pero compacta */}
      <View style={styles.compactSearchContainer}>
        <TextInput
          style={styles.compactSearchInput}
          placeholder="Buscar entregas..."
          value={searchQuery}
          onChangeText={setSearchQuery}
        />
      </View>

      {/* Panel de filtros plegable */}
      {showFilters && (
        <View style={styles.collapsibleFilters}>
          {/* Filtros horizontales compactos */}          <View style={styles.compactFiltersContainer}>
            <ScrollView 
              horizontal 
              showsHorizontalScrollIndicator={false} 
              contentContainerStyle={styles.horizontalFilters}
            >
              <TouchableOpacity
                style={[
                  styles.compactFilterButton, 
                  usingDefaultFilter && !fechaDesde && !fechaHasta ? styles.activeCompactFilter : null
                ]}
                onPress={activarFiltroDiaAnterior}
              >
                <Text style={[
                  styles.compactFilterText, 
                  usingDefaultFilter && !fechaDesde && !fechaHasta ? styles.activeCompactText : null
                ]}>
                  1d
                </Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.compactFilterButton} 
                onPress={() => setFiltroRapido(7)}
              >
                <Text style={styles.compactFilterText}>7d</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.compactFilterButton} 
                onPress={() => setFiltroRapido(30)}
              >
                <Text style={styles.compactFilterText}>30d</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.compactFilterButton} 
                onPress={() => setFiltroRapido(90)}
              >
                <Text style={styles.compactFilterText}>90d</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[styles.compactFilterButton, styles.customDateButton]} 
                onPress={() => setShowDateFilter(!showDateFilter)}
              >
                <Ionicons name="calendar-outline" size={16} color="#2e78b7" />
                <Text style={styles.compactFilterText}>Personalizar</Text>
              </TouchableOpacity>
            </ScrollView>
          </View>

          {/* Filtros de fecha personalizados (solo se muestra cuando se necesita) */}
          {showDateFilter && (
            <View style={styles.customDateContainer}>
              <View style={styles.dateRow}>
                <TextInput
                  style={styles.compactDateInput}
                  placeholder="Desde (YYYY-MM-DD)"
                  value={fechaDesde}
                  onChangeText={setFechaDesde}
                />
                <TextInput
                  style={styles.compactDateInput}
                  placeholder="Hasta (YYYY-MM-DD)"
                  value={fechaHasta}
                  onChangeText={setFechaHasta}
                />
                <TouchableOpacity 
                  style={styles.closeDateButton} 
                  onPress={() => setShowDateFilter(false)}
                >
                  <Ionicons name="close" size={20} color="#666" />
                </TouchableOpacity>
              </View>
              
              {/* Mostrar rango actual */}
              {(fechaDesde || fechaHasta) && (
                <View style={styles.compactFilterInfo}>
                  <Text style={styles.compactFilterInfoText}>
                    Filtro: {fechaDesde || 'Sin inicio'} → {fechaHasta || 'Sin fin'}
                  </Text>
                </View>
              )}
            </View>
          )}
        </View>
      )}

      {loading ? (
        <View style={styles.centerContainer}>
          <ActivityIndicator size="large" color="#007AFF" />
        </View>
      ) : datosFiltrados.length === 0 ? (
        <View style={styles.centerContainer}>
          <Text style={styles.noDataText}>No hay entregas para mostrar</Text>
        </View>
      ) : (
        <FlatList
          data={datosFiltrados} // Usar los datos filtrados y ordenados por fecha
          renderItem={renderEntrega}
          keyExtractor={generateKey}
          removeClippedSubviews={true}
          maxToRenderPerBatch={10}
          windowSize={21}
          contentContainerStyle={styles.listContainer}
          onEndReached={() => {
            if (currentPage * pageSize < datosFiltrados.length) {
              setCurrentPage(prev => prev + 1);
            }
          }}
          onEndReachedThreshold={0.5}          ListFooterComponent={
            currentPage * pageSize < datosFiltrados.length ? (
              <Text style={styles.loadingMoreText}>Cargando más entregas...</Text>
            ) : null
          }
        />
      )}

      {/* Modal para información de observaciones generales */}
      <Modal
        visible={infoModalVisible}
        animationType="slide"
        transparent={true}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Observaciones Generales</Text>
            
            {selectedEntregaInfo && selectedEntregaInfo.ObservaGral ? (
              <ScrollView style={styles.modalScrollView}>
                <View style={styles.observacionesContainer}>
                  <Text style={styles.observacionesTexto}>
                    {selectedEntregaInfo.ObservaGral}
                  </Text>
                </View>
              </ScrollView>
            ) : (
              <View style={styles.centerContainer}>
                <Text style={styles.noDataText}>No hay observaciones generales disponibles</Text>
              </View>
            )}

            <TouchableOpacity
              style={styles.cerrarModalButton}
              onPress={() => setInfoModalVisible(false)}
            >
              <Text style={styles.cerrarModalTexto}>Cerrar</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      {/* Modal para detalles de entrega */}
      <Modal
        visible={modalVisible}
        animationType="slide"
        transparent={true}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Detalles de la Entrega</Text>
            
            {selectedEntrega && (
              <ScrollView style={styles.modalScrollView}>
                <View style={styles.detallesContainer}>
                  <Text style={styles.detalleTitulo}>Nº Pedido:</Text>
                  <Text style={styles.detalleTexto}>{selectedEntrega.NoPedido}</Text>
                  
                  <Text style={styles.detalleTitulo}>ID Entrega:</Text>
                  <Text style={styles.detalleTexto}>{selectedEntrega.Id_Entrega}</Text>
                  
                  <Text style={styles.detalleTitulo}>Comercial:</Text>
                  <Text style={styles.detalleTexto}>{selectedEntrega.Comercial}</Text>
                  
                  <Text style={styles.detalleTitulo}>Cliente:</Text>
                  <Text style={styles.detalleTexto}>{selectedEntrega.Cliente}</Text>
                  
                  <Text style={styles.detalleTitulo}>Ref. Cliente:</Text>
                  <Text style={styles.detalleTexto}>{selectedEntrega.RefCliente}</Text>
                  
                  <Text style={styles.detalleTitulo}>Fecha de envío:</Text>
                  <Text style={styles.detalleTexto}>
                    {new Date(selectedEntrega.FechaEnvio).toLocaleDateString('es-ES', {
                      day: '2-digit',
                      month: '2-digit',
                      year: 'numeric'
                    })}
                  </Text>
                  
                  <Text style={styles.detalleTitulo}>Estado de Carga:</Text>
                  <Text style={styles.detalleTexto}>{selectedEntrega.EstadoCarga}</Text>
                  
                  <Text style={styles.detalleTitulo}>Caballetes:</Text>
                  <Text style={styles.detalleTexto}>{selectedEntrega.NCaballetes}</Text>
                    <Text style={styles.detalleTitulo}>Bultos:</Text>
                  <Text style={styles.detalleTexto}>{selectedEntrega.NBultos}</Text>
                  
                  {selectedEntrega.Observaciones && (
                    <>
                      <Text style={styles.detalleTitulo}>Observaciones Adicionales:</Text>
                      <View style={styles.observacionesContainer}>
                        <Text style={styles.observacionesTexto}>
                          {selectedEntrega.Observaciones}
                        </Text>
                      </View>
                    </>
                  )}
                </View>
              </ScrollView>
            )}

            <TouchableOpacity
              style={styles.cerrarModalButton}
              onPress={() => setModalVisible(false)}
            >
              <Text style={styles.cerrarModalTexto}>Cerrar</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  // Nuevos estilos para header compacto
  compactHeader: {
    backgroundColor: 'white',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2e78b7',
  },  headerActions: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  infoButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    backgroundColor: '#e8f5e8',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#4CAF50',
  },
  infoButtonText: {
    fontSize: 12,
    color: '#4CAF50',
    marginLeft: 4,
    fontWeight: '500',
  },
  filterIndicatorButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    backgroundColor: '#f0f8ff',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#2e78b7',
  },
  filterIndicatorText: {
    fontSize: 12,
    color: '#2e78b7',
    marginLeft: 4,
    fontWeight: '500',
  },
  compactRefreshButton: {
    padding: 6,
    backgroundColor: '#f0f8ff',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#2e78b7',
  },
  statusRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  connectionBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 6,
    paddingVertical: 2,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
  },
  connectionBadgeText: {
    fontSize: 10,
    marginLeft: 2,
    fontWeight: '500',
  },
  resultsCount: {
    fontSize: 12,
    color: '#666',
    fontStyle: 'italic',
  },
  compactSearchContainer: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  compactSearchInput: {
    height: 36,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    paddingHorizontal: 12,
    backgroundColor: 'white',
    fontSize: 14,
  },
  collapsibleFilters: {
    backgroundColor: '#f8f9fa',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  compactFiltersContainer: {
    marginBottom: 8,
  },
  horizontalFilters: {
    paddingRight: 16,
    gap: 8,
  },
  compactFilterButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    backgroundColor: '#e9ecef',
    borderRadius: 16,
    borderWidth: 1,
    borderColor: '#dee2e6',
    minWidth: 50,
    alignItems: 'center',
  },
  activeCompactFilter: {
    backgroundColor: '#28a745',
    borderColor: '#28a745',
  },
  compactFilterText: {
    fontSize: 12,
    color: '#495057',
    fontWeight: '600',
  },
  activeCompactText: {
    color: 'white',
  },
  customDateButton: {
    flexDirection: 'row',
    gap: 4,
    paddingHorizontal: 8,
  },
  clearFilterButton: {
    backgroundColor: '#dc3545',
    borderColor: '#dc3545',
  },
  clearFilterText: {
    color: 'white',
  },
  customDateContainer: {
    marginTop: 8,
  },
  dateRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  compactDateInput: {
    flex: 1,
    height: 36,
    borderWidth: 1,
    borderColor: '#d0d0d0',
    borderRadius: 6,
    paddingHorizontal: 8,
    backgroundColor: 'white',
    fontSize: 12,
  },
  closeDateButton: {
    padding: 4,
  },
  compactFilterInfo: {
    backgroundColor: '#e3f2fd',
    padding: 6,
    borderRadius: 6,
    borderLeftWidth: 3,
    borderLeftColor: '#2e78b7',
    marginTop: 8,
  },
  compactFilterInfoText: {
    fontSize: 11,
    color: '#1565c0',
    fontWeight: '500',
  },
  // Estilos originales (mantenidos para compatibilidad)
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  connectionIndicator: {
    padding: 8,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  connectionContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  connectionText: {
    fontSize: 12,
    marginLeft: 4,
  },
  refreshButton: {
    backgroundColor: '#2e78b7',
    padding: 8,
    borderRadius: 8,
  },
  searchContainer: {
    padding: 16,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  searchInput: {
    height: 40,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    paddingHorizontal: 16,
    backgroundColor: 'white',
  },
  listContainer: {
    padding: 16,
  },
  itemContainer: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  itemHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  pedidoNumero: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2e78b7',
  },
  fechaText: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },
  estadoBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
  },
  estadoText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  itemContent: {
    gap: 8,
  },
  contentText: {
    fontSize: 14,
    color: '#444',
  },
  detallesEntrega: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    backgroundColor: '#f8f8f8',
    padding: 8,
    borderRadius: 8,
    marginTop: 4,
  },
  detalleText: {
    fontSize: 13,
    color: '#666',
  },
  observacionText: {
    fontSize: 13,
    color: '#666',
    fontStyle: 'italic',
    marginTop: 4,
  },
  centerContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  noDataText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  loadingMoreText: {
    textAlign: 'center',
    padding: 16,
    color: '#666',
  },
  entregaItem: {
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  entregaTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2e78b7',
  },
  entregaText: {
    fontSize: 14,
    color: '#444',
  },
  // Estilos para filtros de fecha (originales, para compatibilidad)
  filterContainer: {
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  filterToggleButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    backgroundColor: '#f8f9fa',
    marginHorizontal: 16,
    marginVertical: 8,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  filterToggleText: {
    fontSize: 16,
    color: '#2e78b7',
    fontWeight: '600',
    marginHorizontal: 8,
  },
  dateFilterContainer: {
    padding: 16,
    backgroundColor: '#f8f9fa',
  },
  dateInputsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12,
  },
  dateInputGroup: {
    flex: 1,
    marginHorizontal: 4,
  },
  dateLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    marginBottom: 4,
  },
  dateInput: {
    height: 40,
    borderWidth: 1,
    borderColor: '#d0d0d0',
    borderRadius: 6,
    paddingHorizontal: 12,
    backgroundColor: 'white',
    fontSize: 14,
  },
  quickFiltersContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 12,
  },
  quickFilterButton: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    backgroundColor: '#2e78b7',
    borderRadius: 6,
    minWidth: 60,
    alignItems: 'center',
  },
  quickFilterText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600',
  },
  currentFilterInfo: {
    backgroundColor: '#e3f2fd',
    padding: 8,
    borderRadius: 6,
    borderLeftWidth: 3,
    borderLeftColor: '#2e78b7',
  },
  currentFilterText: {
    fontSize: 12,
    color: '#1565c0',
    fontWeight: '500',
  },
  resultsInfo: {
    backgroundColor: 'white',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  resultsText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    fontStyle: 'italic',
  },
  // Estilos para el Modal
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 20,
    width: '90%',
    maxHeight: '80%',
    elevation: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 6,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#2e78b7',
    textAlign: 'center',
    marginBottom: 20,
  },
  modalScrollView: {
    maxHeight: '85%',
  },
  detallesContainer: {
    paddingBottom: 20,
  },
  detalleTitulo: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginTop: 12,
    marginBottom: 4,
  },
  detalleTexto: {
    fontSize: 15,
    color: '#555',
    marginBottom: 8,
    lineHeight: 20,
  },
  observacionesContainer: {
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    padding: 12,
    marginTop: 4,
    marginBottom: 12,
    borderLeftWidth: 4,
    borderLeftColor: '#2e78b7',
  },
  observacionesTexto: {
    fontSize: 14,
    color: '#444',
    lineHeight: 20,
    textAlign: 'justify',
  },
  observacionIndicador: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 8,
    padding: 8,
    backgroundColor: '#e3f2fd',
    borderRadius: 6,
  },
  observacionTexto: {
    fontSize: 12,
    color: '#2e78b7',
    marginLeft: 4,
    fontWeight: '600',
  },
  cerrarModalButton: {
    backgroundColor: '#2e78b7',
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 20,
    marginTop: 10,
    alignItems: 'center',
  },
  cerrarModalTexto: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  // Estilos para botón de filtro activo
  activeFilterButton: {
    backgroundColor: '#28a745',
  },
  activeFilterText: {
    color: 'white',
    fontWeight: 'bold',
  },
});
